import random
import os

import openai

from db_func import addUserID_DB, delUserID_DB, selectUserID_DB, selectAdminID_DB, addAdminID_DB, selectAllUsers, addPhoneNumber, selectPhone, add_name, select_name, select_suc_select, user_suc_add, label_lines
from validator import normalize_text, check_number, check_number_ru, format_phone_number, log_error
from config import bot, OWNER_ID, telebot, NUMBERS_ROWS, MAIL
from telephone import postPhone
from mail_send import *

def count_lines_in_file(user_id : str) -> int:
    with open(f'users/{user_id}.txt', 'r', encoding='utf-8') as file:
        lines = file.readlines()
    return len(lines)

try:

    if not os.path.exists("users"):
        os.mkdir("users")

    with open('txt_files/prompt.txt', 'r', encoding='UTF-8') as prompt1:
        content_start = prompt1.read()

    openai.api_key = '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' # —Ç–æ–∫–µ–Ω openai api –∫–ª—é—á 


    print('----------------------------------------------------------------------')
    print(f"–ü—Ä–æ–º–ø—Ç: {content_start}") 
    print('----------------------------------------------------------------------')

except Exception as e:
    log_error(e)

@bot.message_handler(commands=['start']) # –∏–∑–Ω–∞—á–∞–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def command_start_checker(message : telebot.types.Message):
    try:
        if selectUserID_DB(message.from_user.id) == None:
            addUserID_DB(userID=message.from_user.id)
        bot.reply_to(message, f'üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ')

    except Exception as e:
        log_error(e)

@bot.message_handler(commands=['–¥–æ–±–∞–≤–∏—Ç—å'])
def handle_add_command(message: telebot.types.Message):
    if message.from_user.id != OWNER_ID:
        return
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    try:
        args = message.text.split()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(args) < 2:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–¥–æ–±–∞–≤–∏—Ç—å <id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        user_id = args[1]
        user_suc_add(int(user_id))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
        bot.send_message(message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\nüîì–û–Ω —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞", parse_mode='MarkdownV2')

    except Exception as e:
        log_error(e)

@bot.message_handler(commands=['—Ä–∞—Å—Å—ã–ª–∫–∞'])
def command_posting_all(message: telebot.types.Message):
    if message.from_user.id != OWNER_ID:
        if select_suc_select(message.from_user.id) == None:
            return
    try:
        admin_id = message.from_user.id

        if selectAdminID_DB(admin_id) is not None or admin_id == OWNER_ID:
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
            bot.register_next_step_handler(message, get_media_type)

        else:
            bot.reply_to(message, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    except Exception as e:
        log_error(e)


def get_media_type(message: telebot.types.Message):
    
    try:
        media_type = message.text.lower()    

        if media_type in ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–≤–∏–¥–µ–æ', '–∞—É–¥–∏–æ', '–¥–æ–∫—É–º–µ–Ω—Ç', '—Ç–µ–∫—Å—Ç']:
            bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ {media_type} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            bot.register_next_step_handler(message, get_media, media_type)

        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç")

    except Exception as e:
        log_error(e)


def get_media(message: telebot.types.Message, media_type: str):
    try:
        users_ids = selectAllUsers()
        print(media_type)
        print(message.audio)

        if media_type == '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' and message.photo:
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(f"media/images/image_{file_id}.jpg", 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            bot.register_next_step_handler(message, send_image, users_ids, file_id)

        elif media_type == '–≤–∏–¥–µ–æ' and message.video:
            file_id = message.video.file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(f"media/videos/video_{file_id}.mp4", 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ")
            bot.register_next_step_handler(message, send_video, users_ids, file_id)

        elif media_type == '–∞—É–¥–∏–æ' and message.audio:
            
            file_id = message.audio.file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(f"media/audio/audio_{file_id}.mp3", 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∞—É–¥–∏–æ")
            bot.register_next_step_handler(message, send_audio, users_ids, file_id)

        elif media_type == '—Ç–µ–∫—Å—Ç' and message.text:

            text = message.text
            for user_id in users_ids:
                try:
                    bot.send_message(user_id, text)
                except: pass

            bot.reply_to(message, "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        elif media_type == '–¥–æ–∫—É–º–µ–Ω—Ç' and message.document:
            file_id = message.document.file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            with open(f"media/documents/document_{file_id}.pdf", 'wb') as new_file:
                new_file.write(downloaded_file)

            bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            bot.register_next_step_handler(message, send_document, users_ids, file_id)

        else:
            bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")

    except Exception as e:
        log_error(e)


def send_image(message: telebot.types.Message, users_ids, file_id):
    try:
        text = message.text
        for user_id in users_ids:
            with open(f"media/images/image_{file_id}.jpg", 'rb') as photo:
                try:
                    bot.send_photo(user_id, photo, caption=text)
                except: pass

        bot.reply_to(message, "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        log_error(e)


def send_text(message: telebot.types.Message, users_ids):
    try:
        text = message.text
        for user_id in users_ids:
            try:
                bot.send_message(user_id, text)
            except: pass

        bot.reply_to(message, "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        log_error(e)


def send_video(message: telebot.types.Message, users_ids, file_id):
    try:
        text = message.text
        for user_id in users_ids:
            with open(f"media/videos/video_{file_id}.mp4", 'rb') as video:
                try:            
                    bot.send_video(user_id, video, caption=text)
                except: pass

        bot.reply_to(message, "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        log_error(e)


def send_audio(message: telebot.types.Message, users_ids, file_id):
    try:
        text = message.text
        for user_id in users_ids:
            with open(f"media/audio/audio_{file_id}.mp3", 'rb') as photo:
                try:
                    bot.send_audio(user_id, photo, caption=text)
                except: pass
    except Exception as e:
        log_error(e)

def send_document(message: telebot.types.Message, users_ids, file_id):
    try:
        text = message.text
        for user_id in users_ids:
            with open(f"media/documents/document_{file_id}.pdf", 'rb') as document:
                try:
                    bot.send_document(user_id, document, caption=text)
                except: pass

        bot.reply_to(message, "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        log_error(e)


def send_name(message : telebot.types.Message, user_id: int):
    print('–Ø –≤ –∑–∞–ø–∏—Å–∏')
    name = message.text 
    add_name(user_id, name)
    bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–≤–æ–¥ —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏, {name}')
    return


@bot.message_handler(commands=['–∞–¥–º–∏–Ω-–¥–æ–±–∞–≤–∏—Ç—å'])
def command_admin_add(message : telebot.types.Message):
    if message.from_user.id != OWNER_ID:
        if select_suc_select(message.from_user.id) == None:
            return
    try:
        if message.from_user.id == OWNER_ID:
            try:
                arg = message.text.split()[1:][0]
                arg = int(arg)
            except:
                bot.reply_to(message, "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                return

            if selectAdminID_DB(message.from_user.id) != None:
                bot.reply_to(message, "‚ùå –¢–∞–∫–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            addAdminID_DB(arg)
            bot.reply_to(message, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

        else:
            bot.reply_to(message, "‚ùå –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞")

    except Exception as e:
        log_error(e)

@bot.message_handler(commands=['–º–æ–π-id'])
def command_my_id(message : telebot.types.Message):
    
    try:
        bot.reply_to(message, f"üÜî –í–∞—à –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: `{message.from_user.id}`", parse_mode='MarkdownV2')   
    except Exception as e:
        log_error(e)


@bot.message_handler()
def handle_message(message : telebot.types.Message):
    try:
        if format_phone_number(message.text):
            phone = format_phone_number(message.text)

        else: phone = message.text

        if check_number(phone) == True:

            if selectPhone(phone) == None:
                addPhoneNumber(phone)
            
                if check_number_ru(phone) == True:
                    postPhone(phone)

            sender = 'test1@akban.ru'
            subject = f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º'
            file_path = f'users/{message.from_user.id}.txt'
            smtp_server = 'mail.akban.ru'       
            smtp_port = 465
            username = 'test1@akban.ru'
            password = '9hI@zzVbmP=k'
            name_telegram = message.from_user.full_name

            send_email_with_file_content(sender, MAIL, subject, file_path, smtp_server, smtp_port, username, password, name_telegram, selectPhone(phone), select_name(message.from_user.id))
            bot.reply_to(message, "üîâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞!")
            return
        
        else: pass

        randint = random.randint(0, 10)

        if randint == 1:
            number_phone_notify_text = "üìû –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä (–ø–æ –∂–µ–ª–∞–Ω–∏—é)\nüìÄ –§–æ—Ä–º–∞—Ç: +7 XXX XXX XX XX.\nüö©–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–∞–∫ –∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XX XXX XXX XX XX –∏–ª–∏ +X XXX XXX XX XX\n\n"

        elif randint != 1:
            number_phone_notify_text = ""
            
        if select_name(message.from_user.id) == None: 
            name = '–ü–æ–∫–∞ –Ω–µ –≤–≤—ë–ª'
        else: 
            name = select_name(message.from_user.id)


        if f"{message.chat.id}.txt" not in os.listdir('users'):
            with open(f"users/{message.chat.id}.txt", "w+") as f:
                f.write('')

        with open(f'users/{message.chat.id}.txt', 'r', encoding='utf-8') as file:
            oldmes = file.read()

        if message.text == '/clear':
            with open(f'users/{message.chat.id}.txt', 'w', encoding='utf-8') as file:
                file.write('')
            return bot.send_message(chat_id=message.chat.id, text='–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!')

        send_message = bot.send_message(chat_id=message.chat.id, text='–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!')
        

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-16k",
            messages=[{"role": "user", "content": oldmes},
                        {"role": "user","content": f'–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {oldmes};–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –ë–æ—Ç:, –Ω–µ –ø–∏—à–∏ –æ–± —ç—Ç–æ–º, —ç—Ç–æ —Ç—ã; –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–æ–≤—É—Ç: {name}; –ó–∞–ø—Ä–æ—Å {content_start}: {message.text}'}], presence_penalty=0.6)
        

        generated_text = response.choices[0].message.content.strip()
        normalize = normalize_text(generated_text)
        bot.edit_message_text(text=f"{number_phone_notify_text} {normalize}", chat_id=message.chat.id, message_id=send_message.message_id)
        

        with open(f'users/{message.chat.id}.txt', 'a+', encoding='utf-8') as file:
            file.write(message.text.replace('\n', ' ') + '\n' + response.choices[0].message["content"].replace('\n', ' ') + '\n')


        with open(f'users/{message.chat.id}.txt', 'r', encoding='utf-8') as f:
            lines = f.readlines()

        if len(lines) >= NUMBERS_ROWS +1:
            with open(f'users/{message.chat.id}.txt', 'w', encoding='utf-8') as f:
                f.writelines(lines[2:])


        if count_lines_in_file(str(message.from_user.id)) == 6 and select_name(message.from_user.id) == None:
            bot.send_message(message.chat.id, f'‚ùó –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è —á—Ç–æ –±—ã –º—ã –º–æ–≥–ª–∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –≤–∞–º –ø–æ –Ω–µ–º—É')
            bot.register_next_step_handler(message, send_name, message.from_user.id)

        # label_lines(f'users/{message.chat.id}.txt')
        
    except Exception as e:
        log_error(e)

   

bot.polling()
